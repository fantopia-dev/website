// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbWaitlistFieldNames          = builder.RawFieldNames(&TbWaitlist{})
	tbWaitlistRows                = strings.Join(tbWaitlistFieldNames, ",")
	tbWaitlistRowsExpectAutoSet   = strings.Join(stringx.Remove(tbWaitlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbWaitlistRowsWithPlaceHolder = strings.Join(stringx.Remove(tbWaitlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbWaitlistModel interface {
		Insert(ctx context.Context, data *TbWaitlist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbWaitlist, error)
		FindOneByEmail(ctx context.Context, email string) (*TbWaitlist, error)
		Update(ctx context.Context, data *TbWaitlist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbWaitlistModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbWaitlist struct {
		Id         int64     `db:"id"`          // id
		Email      string    `db:"email"`       // 邮箱
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后更新时间
	}
)

func newTbWaitlistModel(conn sqlx.SqlConn) *defaultTbWaitlistModel {
	return &defaultTbWaitlistModel{
		conn:  conn,
		table: "`tb_waitlist`",
	}
}

func (m *defaultTbWaitlistModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbWaitlistModel) FindOne(ctx context.Context, id int64) (*TbWaitlist, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbWaitlistRows, m.table)
	var resp TbWaitlist
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbWaitlistModel) FindOneByEmail(ctx context.Context, email string) (*TbWaitlist, error) {
	var resp TbWaitlist
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", tbWaitlistRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbWaitlistModel) Insert(ctx context.Context, data *TbWaitlist) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tbWaitlistRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Email)
	return ret, err
}

func (m *defaultTbWaitlistModel) Update(ctx context.Context, newData *TbWaitlist) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbWaitlistRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Email, newData.Id)
	return err
}

func (m *defaultTbWaitlistModel) tableName() string {
	return m.table
}
